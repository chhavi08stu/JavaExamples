public class TestMaxValueOfSumOf2DHourGlass {
	/*
	 * -1 -1 0 -9 -2 -2 -2 -1 -6 -8 -2 -5 -1 -1 -1 -2 -3 -4 -1 -9 -2 -4 -4 -5 -7 -3
	 * -3 -2 -9 -9 -1 -3 -1 -2 -4 -5
	 */

	static int[][] arr = { { -1, -1, 0, -9, -2, -2 }, { -2, -1, -6, -8, -2, -5 }, { -1, -1, -1, -2, -3, -4 },
			{ -1, -9, -2, -4, -4, -5 }, { -7, -3, -3, -2, -9, -9 }, { -1, -3, -1, -2, -4, -5 } };
	static int retValue = 0;
	public static void main(String[] args) {
		System.out.println(hourglassSum(arr));
	}

	static int hourglassSum(int[][] arr) {
		int m = arr.length - 3 + 1;//index starts from 0 so need to add 1 to get proper length till nth item
		int[][] sumOf2D = new int[m][m];

		int i = 0, j = 0;
		for (i = 0; i <= arr.length - 3; i++) {

			int[] arrJ = arr[i];
			int num1D = 0;
			for (j = 0; j <= arrJ.length - 3; j++) {
				int value = get2DArraySum(arr, i, j);
				sumOf2D[i][num1D] = value;
				num1D++;
			}
		}
		System.out.println("****************************");

		for (i = 0; i < sumOf2D.length; i++) {

			for (j = 0; j < sumOf2D.length; j++) {
				System.out.print("\t" + sumOf2D[i][j]);
			}
			System.out.println("");
		}
		
		int val = getMaxNumberFromArray(sumOf2D);
		return val;
	}

	private static int getMaxNumberFromArray(int[][] sumOf2D) {
		int maxVal = sumOf2D[0][0];
		for (int i = 0; i < sumOf2D.length; i++) {
			int[] arrJ = sumOf2D[i];
			Arrays.sort(arrJ);
			if (maxVal < sumOf2D[i][sumOf2D.length - 1]) {
				maxVal = sumOf2D[i][sumOf2D.length - 1];
			}
		}
		return maxVal;
	}

	private static int get2DArraySum(int[][] arr, int start, int end) {
		int[][] value2D = new int[4][4];
		int m = 0;

		for (int i = start; i < start + 3; i++) {
			int n = 0;
			int j = end;
			for (j = end; j < end + 3; j++) {
				// while (j < end + 3) {
				value2D[m][n] = arr[i][j];
				n++;
				// j++;
			}
			m++;
		}
		retValue = getSumOfNumber(value2D);
		return retValue;
	}

	private static int getSumOfNumber(int[][] value2D) {
		retValue = 0;
		for (int x = 0; x < 3; x = x + 2) {
			for (int y = 0; y < 3; y++) {
				retValue = retValue + value2D[x][y];
			}
		}
		retValue = retValue + value2D[1][1];
		return retValue;
	}
}
