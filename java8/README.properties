// stream for Account class to list based on value.
// collect the data in Map<String,List<String>> based on value parameter of map.

class TestClassForStreamGroupingByExample{
public static void main(String[] args) {
	
		List<Account> list = new ArrayList<Account>();

		Account a1 = new Account("Manu", "saving");
		Account a2 = new Account("Ranu", "current");
		Account a3 = new Account("Ron", "saving");
		Account a4 = new Account("Kritika", "saving");
		Account a5 = new Account("Juhi", "current");
		list.add(a1);
		list.add(a2);
		list.add(a3);
		list.add(a4);
		list.add(a5);

		list.stream().filter(k -> k.getType().equalsIgnoreCase("saving")).collect(Collectors.toList())
				.forEach(k -> System.out.print(k.getName() + " & " + k.getType()));
		System.out.println("**************************************************************");
					
				list.stream().collect(Collectors.groupingBy(Account::getType,
		                         Collectors.mapping(Account::getName, Collectors.toList()))).forEach((k, v) -> System.out.print(k + " & " + v));
	}

}

class Account {
	String name;
	String type;

	Account(String name, String type) {
		this.name = name;
		this.type = type;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

}

class Employee2 {
	private int id;
	private String name;

	public Employee2(int id, String name) {
		this.id = id;
		this.name = name;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
}
